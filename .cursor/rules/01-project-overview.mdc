---
alwaysApply: true
description: AI接口测试平台项目总览和架构说明
---

# AI 接口测试平台 - 项目总览

## 项目简介
这是一个基于 AI 的接口测试平台，支持自动生成测试用例、执行接口测试、管理测试数据等功能。

## 项目架构

### 1. **api-engine** - API测试引擎
- **技术栈**: Python + Pytest
- **核心功能**: 执行API测试用例、支持YAML格式用例、关键字驱动测试
- **入口文件**: [api-engine/apirun/cli.py](mdc:api-engine/apirun/cli.py)
- **核心模块**:
  - `core/ApiTestRunner.py` - 测试执行器
  - `parse/YamlCaseParser.py` - YAML用例解析器
  - `extend/keywords.py` - 关键字扩展
  
### 2. **platform-fastapi-server** - FastAPI后端服务
- **技术栈**: FastAPI + SQLModel + MySQL + MinIO
- **核心功能**: 
  - 用户认证与授权 (JWT)
  - AI模型管理与测试用例生成
  - 接口管理、项目管理、测试历史记录
  - 文件存储 (MinIO)
- **入口文件**: [platform-fastapi-server/run.py](mdc:platform-fastapi-server/run.py)
- **关键依赖**: [platform-fastapi-server/requirements.txt](mdc:platform-fastapi-server/requirements.txt)
- **模块结构**:
  - `apitest/` - API测试相关模块
  - `login/` - 登录认证模块
  - `sysmanage/` - 系统管理模块
  - `core/` - 核心工具和数据库配置

### 3. **platform-vue-web** - Vue3前端应用
- **技术栈**: Vue 3 + Element Plus + Vite + Vue Router + Vuex
- **核心功能**: 
  - 用户界面
  - AI测试用例生成对话框
  - 接口管理、项目管理
  - 测试执行与结果展示
- **入口文件**: [platform-vue-web/src/main.js](mdc:platform-vue-web/src/main.js)
- **路由配置**: [platform-vue-web/src/router](mdc:platform-vue-web/src/router)
- **依赖配置**: [platform-vue-web/package.json](mdc:platform-vue-web/package.json)

## 项目端口配置
- **后端服务**: http://localhost:8000
- **前端服务**: http://localhost:5173
- **API文档**: http://localhost:8000/docs

## 数据库架构
- **数据库**: MySQL
- **ORM**: SQLModel (Pydantic + SQLAlchemy)
- **主要数据表**:
  - 用户相关: User, Role, Permission
  - API测试: ApiProject, ApiInfo, ApiTestHistory
  - AI功能: AiModel, PromptTemplate
  - 系统管理: DbBase, KeyWord, MetaData

## 关键功能模块

### AI测试用例生成
- 支持多个AI模型 (DeepSeek, 通义千问等)
- 提示词模板管理
- 支持上传需求文档 (TXT/Word/PDF)
- 可生成 API/Web/App 三种测试类型

### 接口测试执行
- YAML格式用例定义
- 支持变量替换和上下文传递
- 关键字驱动测试
- 数据库操作支持

## 开发模式参考
详细的开发模式说明请查看: [cursor/Cursor如何开发前后端分离项目.md](mdc:cursor/Cursor如何开发前后端分离项目.md)

## 快速启动指南
参考文档: [QUICK_START_AI_TESTCASE.md](mdc:QUICK_START_AI_TESTCASE.md)

## 代码规范要求
- Python代码遵循 PEP 8 规范
- Vue组件使用 Composition API (推荐) 或 Options API
- 所有API接口必须有清晰的文档注释
- 提交前确保代码格式化和 linter 检查通过
