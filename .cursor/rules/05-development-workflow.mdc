---
alwaysApply: true
description: 开发工作流程和协作规范
---

# 开发工作流程规范

## 项目启动流程

### 1. 后端服务启动
```bash
# 进入后端目录
cd platform-fastapi-server

# 安装依赖（首次）
pip install -r requirements.txt

# 初始化数据库（首次）
python init_system.py

# 启动服务
python run.py
```

服务地址: http://localhost:8000
API文档: http://localhost:8000/docs

### 2. 前端服务启动
```bash
# 进入前端目录
cd platform-vue-web

# 安装依赖（首次）
pnpm install

# 启动开发服务器
pnpm dev
```

服务地址: http://localhost:5173

### 3. 测试引擎使用
```bash
# 进入测试引擎目录
cd api-engine

# 安装依赖（首次）
pip install -r requirements.txt

# 执行测试用例
pytest examples/example-api-cases/
```

## 开发流程

### 新功能开发流程

#### 后端开发
1. **创建数据模型** (Model)
   - 在对应模块的 `model/` 目录创建模型文件
   - 继承 `SQLModel`，定义表结构
   - 添加字段验证和索引

2. **创建Schema** (DTO)
   - 在对应模块的 `schemas/` 目录创建 Schema 文件
   - 定义请求/响应模型
   - 添加数据验证规则

3. **创建控制器** (Controller/API)
   - 在对应模块的 `api/` 目录创建控制器文件
   - 定义路由和处理函数
   - 实现业务逻辑
   - 添加错误处理

4. **注册路由**
   - 在 [platform-fastapi-server/app.py](mdc:platform-fastapi-server/app.py) 中注册路由

5. **测试接口**
   - 访问 http://localhost:8000/docs
   - 测试新增的接口
   - 验证请求和响应

#### 前端开发
1. **创建API函数**
   - 在 `src/api/` 目录创建对应的API模块
   - 定义接口调用函数
   - 添加参数类型注释

2. **创建页面组件**
   - 在 `src/views/` 目录创建页面组件
   - 使用 Composition API
   - 实现页面逻辑和UI

3. **添加路由**
   - 在 [platform-vue-web/src/router](mdc:platform-vue-web/src/router) 中添加路由配置
   - 配置路由元信息
   - 添加路由守卫（如需要）

4. **状态管理（可选）**
   - 在 [platform-vue-web/src/store](mdc:platform-vue-web/src/store) 中添加状态管理
   - 定义 state、mutations、actions

5. **测试功能**
   - 启动前端服务
   - 测试页面交互
   - 验证数据流转

#### 测试用例开发
1. **编写YAML用例**
   - 在 `api-engine/examples/` 创建用例文件
   - 按照YAML格式编写测试步骤
   - 添加断言验证

2. **配置上下文**
   - 更新 `context.yaml` 配置
   - 定义变量和环境配置

3. **执行测试**
   - 运行 pytest 执行测试
   - 查看测试报告
   - 修复失败用例

## Git 工作流程

### 分支管理
```
main (主分支)
  ├── develop (开发分支)
  │   ├── feature/user-management (功能分支)
  │   ├── feature/ai-testcase-generation (功能分支)
  │   └── bugfix/login-error (修复分支)
  └── release/v1.0.0 (发布分支)
```

### 提交规范
```bash
# 功能开发
git commit -m "feat: 添加用户管理功能"

# Bug修复
git commit -m "fix: 修复登录失败问题"

# 文档更新
git commit -m "docs: 更新API文档"

# 代码重构
git commit -m "refactor: 重构项目管理模块"

# 性能优化
git commit -m "perf: 优化数据库查询性能"

# 测试相关
git commit -m "test: 添加用户管理测试用例"

# 构建相关
git commit -m "build: 更新依赖版本"

# 样式修改
git commit -m "style: 格式化代码"
```

### 常用Git命令
```bash
# 创建功能分支
git checkout -b feature/new-feature

# 提交代码
git add .
git commit -m "feat: 新功能描述"

# 推送到远程
git push origin feature/new-feature

# 合并到开发分支
git checkout develop
git merge feature/new-feature

# 拉取最新代码
git pull origin develop
```

## 代码审查清单

### 后端代码审查
- [ ] 代码符合 PEP 8 规范
- [ ] 函数和类有完整的文档注释
- [ ] 错误处理完善
- [ ] 数据验证充分
- [ ] 数据库查询优化
- [ ] 没有硬编码配置
- [ ] 敏感信息已脱敏
- [ ] API 文档完整

### 前端代码审查
- [ ] 组件结构清晰
- [ ] 变量命名规范
- [ ] 没有控制台错误
- [ ] 样式正常显示
- [ ] 响应式布局正常
- [ ] API 调用有错误处理
- [ ] 表单验证完善
- [ ] 代码格式化一致

### 测试用例审查
- [ ] 用例覆盖主要场景
- [ ] 断言充分且准确
- [ ] 变量命名清晰
- [ ] 用例独立可执行
- [ ] 测试数据合理
- [ ] 错误处理完善

## 调试技巧

### 后端调试
```python
# 1. 打印日志
import logging
logger = logging.getLogger(__name__)
logger.info(f"用户ID: {user_id}")

# 2. 调试器
import pdb
pdb.set_trace()

# 3. 查看SQL语句
from sqlmodel import select
statement = select(User).where(User.id == user_id)
print(statement)  # 打印SQL语句
```

### 前端调试
```javascript
// 1. Console日志
console.log('用户信息:', user)
console.table(projects)

// 2. Vue Devtools
// 安装浏览器插件查看组件状态

// 3. 网络请求
// 在浏览器开发者工具 Network 标签查看请求详情
```

### 接口调试
- 使用 Postman 或 Thunder Client 测试接口
- 查看 FastAPI Swagger 文档 (http://localhost:8000/docs)
- 查看浏览器 Network 面板

## 环境配置

### 开发环境
- Python 3.9+
- Node.js 16+
- MySQL 8.0+
- MinIO (可选)

### 配置文件
- 后端配置: [platform-fastapi-server/config/](mdc:platform-fastapi-server/config)
- 前端配置: [platform-vue-web/vite.config.js](mdc:platform-vue-web/vite.config.js)
- 测试配置: [api-engine/apirun/pytest.ini](mdc:api-engine/apirun/pytest.ini)

## 部署流程

### 后端部署
```bash
# 1. 安装依赖
pip install -r requirements.txt

# 2. 配置环境变量
export DATABASE_URL="mysql+pymysql://user:pass@host:3306/db"
export SECRET_KEY="your-secret-key"

# 3. 初始化数据库
python init_system.py

# 4. 启动服务
uvicorn app:app --host 0.0.0.0 --port 8000
```

### 前端部署
```bash
# 1. 安装依赖
pnpm install

# 2. 构建生产版本
pnpm build

# 3. 部署到服务器
# 将 dist/ 目录内容部署到 Nginx/Apache
```

## 文档维护

### 需要更新文档的情况
1. 新增或修改 API 接口
2. 新增或修改数据模型
3. 新增或修改配置项
4. 新增或修改测试用例格式
5. 修改部署流程

### 文档位置
- API 文档: FastAPI 自动生成 (http://localhost:8000/docs)
- 项目文档: 在 `.cursor/rules/` 目录
- 快速开始: [QUICK_START_AI_TESTCASE.md](mdc:QUICK_START_AI_TESTCASE.md)

## 常见问题解决

### 后端问题
1. **数据库连接失败**
   - 检查数据库配置
   - 确认数据库服务已启动
   - 检查网络连接

2. **导入模块失败**
   - 检查虚拟环境是否激活
   - 确认依赖已安装
   - 检查 Python 版本

3. **JWT Token 失效**
   - 检查 SECRET_KEY 配置
   - 确认 token 未过期
   - 重新登录获取新 token

### 前端问题
1. **跨域错误**
   - 检查 Vite 代理配置
   - 确认后端 CORS 设置
   - 使用正确的 API 地址

2. **组件不显示**
   - 检查组件导入路径
   - 确认组件注册
   - 查看浏览器控制台错误

3. **路由跳转失败**
   - 检查路由配置
   - 确认路由守卫逻辑
   - 查看控制台错误信息

### 测试问题
1. **用例执行失败**
   - 检查 YAML 格式
   - 确认变量定义
   - 查看详细错误日志

2. **断言失败**
   - 检查响应数据结构
   - 确认断言条件正确
   - 使用 debug 模式查看详情

## 性能优化建议

### 后端优化
- 使用数据库索引
- 实现查询分页
- 使用缓存（Redis）
- 异步处理耗时任务
- 优化数据库查询

### 前端优化
- 路由懒加载
- 组件按需加载
- 图片懒加载
- 使用虚拟滚动
- 防抖和节流

### 数据库优化
- 添加合适的索引
- 避免 N+1 查询
- 使用连接池
- 定期清理过期数据

## 安全建议

1. **密码安全**
   - 使用 bcrypt 加密
   - 设置密码强度要求
   - 实现登录失败限制

2. **Token 安全**
   - 设置合理的过期时间
   - 使用 HTTPS 传输
   - 实现 Token 刷新机制

3. **输入验证**
   - 前后端都要验证
   - 防止 SQL 注入
   - 防止 XSS 攻击

4. **权限控制**
   - 实现 RBAC 权限模型
   - 接口级别的权限检查
   - 数据级别的权限隔离

## 团队协作

### 沟通渠道
- 代码审查使用 Pull Request
- 问题追踪使用 Issue
- 文档协作使用 Wiki

### 代码规范
- 遵循项目 Cursor Rules
- 保持代码风格一致
- 编写清晰的注释
- 提供完整的文档

### 知识分享
- 定期技术分享
- 记录踩坑经验
- 更新项目文档
- Code Review 互相学习
